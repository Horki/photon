{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Photon","text":"<p>Photon is a high-performance image processing library, written in Rust and compilable to WebAssembly, which can be used both natively and on the web.</p> <p>It allows developers to apply filters, effects and manipulate channels of their images, as well as apply standard image processing operations such as blurring, cropping, resizing, etc.,</p>"},{"location":"#features","title":"Features","text":"<ul> <li>High-performance: Photon outperforms even the fastest of libraries, including ImageMagick and the Python Imaging Library.</li> <li>Safety and Security: Written in Rust, this library guarantees memory safety. </li> <li>Over 80 effects: Boasting over 80 effects.</li> <li>Use on the web or natively.</li> <li>Cross-platform</li> </ul> <p>This guide will help you install Photon and start using it either natively or on the web.</p>"},{"location":"#image-effects-available","title":"Image Effects Available","text":"<ul> <li>Transformations - Crop, resize, flip, and rotate images. </li> <li>Filters - Apply image filters. </li> <li>Channel Manipulation - Alter channels to create new tinted images, channel-related effects.</li> <li>Special Effects - From solarization to offset fx to blending, over 20 special fx available. </li> <li>Correction - Sharpen, brighten, darken, saturate, color correction</li> </ul>"},{"location":"#web-demo","title":"Web Demo","text":"<p>To view a demo of Photon in action, click here.</p>"},{"location":"#supported-image-formats","title":"Supported Image Formats","text":"<p>The following image formats are supported:</p> <ul> <li>PNG</li> <li>JPEG</li> <li>BMP</li> <li>ICO </li> <li>TIFF</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>See the documentation here.</p>"},{"location":"#featured-in","title":"Featured In","text":"<p>See what others have to say about Photon:</p> <ul> <li>Stephen Downes' Note on Photon</li> </ul>"},{"location":"#ready-to-get-started","title":"Ready To Get Started?","text":"<ul> <li>Get started with WebAssembly.</li> <li>Get started with Rust for native use.</li> </ul>"},{"location":"all-effects/","title":"All Functions","text":"<p>All effects and functions are available in the documentation. </p> <p>See documentation.</p>"},{"location":"contact-developer/","title":"Contact Photon's Developer","text":""},{"location":"contact-developer/#got-a-question-feature-request-or-issue","title":"Got a question, feature request or issue?","text":"<p>If you've got any questions, feature requests or bugs you'd like to report, feel free to contact the maintainer, you  can see further details below.</p>"},{"location":"contact-developer/#opening-issues","title":"Opening Issues","text":"<p>If you'd like to submit feature requests or open Issues, considering doing so on GitHub.</p> <p>Bug</p> <p>If you'd like to submit a bug report, make sure to include the version of Rust you're running, as well as your Operating System  and Browser (if WASM is not working), and then open an issue on GitHub. </p>"},{"location":"contact-developer/#contact-details","title":"Contact Details","text":""},{"location":"contact-developer/#email","title":"Email","text":"<p>If you have any other questions which you'd like to ask the developer, you can send an email to:</p> <p>silviaodwyerdev [at] gmail dot com </p>"},{"location":"contact-developer/#spectrum-chat","title":"Spectrum Chat","text":"<p>You can send a message to: @silvia-odwyer</p> <p>Alternatively, you can ask in Photon's Spectrum chatroom.</p>"},{"location":"contact-developer/#gitter","title":"Gitter","text":"<p>You can also ask your questions, submit ideas, and more in our Gitter chat room.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Want to contribute to Photon? I'm always looking for new effects and filters, so your  contributions would be greatly appreciated. </p> <p>If you have bug reports or want to request features, do open an Issue on GitHub and I'll get right on it. </p> <p>Workflow:</p> <ol> <li>Create your branch. </li> <li>Make your changes, for example, that could include improving documentation, adding new effects or filters, etc., </li> <li>Make sure it runs with <code>cargo run --release</code></li> <li>If you are writing WebAssembly-specific code, and wish to build an npm module, install wasm-pack and then run: <code>wasm-pack build</code>. A package called <code>pkg</code> will be outputted, you can then use this in the webpack demo provided  in the repository. </li> <li>Create a Pull Request, and I'll review it! :D</li> </ol> <p>Thanks so much for contributing!</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installing-photon","title":"Installing Photon","text":""},{"location":"getting-started/#photon-for-the-web","title":"Photon for the Web","text":"<p>Photon is available as an npm module, which calls the underlying WebAssembly code. </p> <p>Ensuring you have Node.JS installed on your machine, install Photon's npm module:</p> <pre><code>npm install @silvia-odwyer/photon\n</code></pre> <p>You can use Photon as you would a standard JavaScript library, since it\u2019s available as an npm module, meaning you can use Photon for the browser, in Electron apps, with Vue, React, other JS frameworks, etc., </p>"},{"location":"getting-started/#photon-with-nodejs","title":"Photon with NodeJS","text":"<p>If you'd like to install Photon for use with NodeJS, install the relevant npm module:</p> <pre><code>npm install @silvia-odwyer/photon-node \n</code></pre>"},{"location":"getting-started/#using-photon-on-the-web","title":"Using Photon On the Web","text":"<p>Check out our accompanying article on how to use Photon on the Web.</p>"},{"location":"getting-started/#photon-natively","title":"Photon Natively","text":"<p>If you\u2019d like to use Photon with a Rust project, you can install the <code>photon-rs</code> Cargo crate by adding the following line to your Cargo.toml dependencies:</p>"},{"location":"getting-started/#cargotoml","title":"Cargo.toml","text":"<pre><code>[dependencies]\nphoton-rs = \"0.2.0\"\n</code></pre>"},{"location":"getting-started/#using-photon-natively","title":"Using Photon Natively","text":"<p>Once you've added Photon as a dependency, you can start using it, see this article for more</p>"},{"location":"isotope-agents/","title":"Get A Docs Site Like This One","text":""},{"location":"isotope-agents/#installation","title":"Installation","text":"<p>If you'd like to get a fully written documentation site (built with MKDocs Material), just like this one,  be sure to take a look at my other project Isotope Agents, available here.</p> <p>Just enter your GitHub repo URL and then choose a documentation framework. There are lots of documentation frameworks available,  including this theme which uses MKDocs Material.</p>"},{"location":"native-tutorial/","title":"Native Tutorial","text":"<p>In this tutorial, we're going to write a program that resizes an image and applies a filter to it. You'll get a feel for how to use Photon, and will be able to build upon this to use Photon in your own projects.</p>"},{"location":"native-tutorial/#getting-started","title":"Getting Started","text":"<p>Ensuring you have Rust installed, create a new Rust project:</p> <pre><code>cargo new photon-demo --bin\ncd photon-demo\n</code></pre> <p>Once you've moved into the new directory, take a look at the source files generated.</p>"},{"location":"native-tutorial/#add-photon-as-a-dependency","title":"Add Photon as A Dependency","text":"<p>Add Photon as a dependency to your project:</p> <pre><code>[dependencies]\nphoton-rs=\"0.2.0\"\n</code></pre> <p>Your Cargo.toml should look like this:</p>"},{"location":"native-tutorial/#cargotoml","title":"Cargo.toml","text":"<pre><code>[package]\nname = \"photon-demo\"\nversion = \"0.1.0\"\nauthors = [\"your_name &lt;your_email&gt;\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nphoton-rs=\"0.2.0\"\n</code></pre>"},{"location":"native-tutorial/#writing-the-program","title":"Writing The Program","text":"<p>Next up, open your <code>bin.rs</code> file. You'll find a sample function in there, remove that since we won't be using it.</p>"},{"location":"native-tutorial/#open-an-image","title":"Open An Image","text":"<p>To open an image:</p>"},{"location":"native-tutorial/#binrs","title":"bin.rs","text":"<pre><code>extern crate photon_rs;\nuse photon_rs::native::{open_image};\n\nfn main() {\n    let mut img = open_image(\"image.jpg\");\n}\n</code></pre>"},{"location":"native-tutorial/#apply-a-filter-effect","title":"Apply a Filter Effect","text":"<p>To apply a filter effect to the opened image, we need to pass in our image and a filter name.</p> <pre><code>photon_rs::filters::filter(&amp;mut img, \"twenties\");\n</code></pre> <p>Notice that we're passing a mutable reference to the image. This allows the function to modify the image, rather than return a new image. There are a variety of filter effects we can pass. Once you get the program compiled, try passing in \"radio\" instead of the filter above. For a full list, see the documentation.</p>"},{"location":"native-tutorial/#save-to-the-filesystem","title":"Save To The Filesystem","text":"<p>Then, to write the image to the filesystem:</p> <pre><code>save_image(img, \"new_image.jpg\");\n</code></pre> <p>Notice here we're saving it as a JPG image, but we could also save it as a PNG or a different output format, by including a different file extension.</p>"},{"location":"native-tutorial/#get-an-image","title":"Get An Image","text":"<p>Next up, you'll need an image to work with. You can use an image from your own collection, or try out the images available at Unsplash, which are also available in the Public Domain.</p> <p>Name it <code>image.jpg</code>, and save it in the same directory as your rust project.</p>"},{"location":"native-tutorial/#final-program","title":"Final Program","text":"<p>The final code looks like this:</p>"},{"location":"native-tutorial/#binrs_1","title":"bin.rs","text":"<pre><code>extern crate photon_rs;\nuse photon_rs::{filters};\nuse photon_rs::native::{open_image, save_image};\n\nfn main() {\n    // Open the image (a PhotonImage is returned)\n    let mut img = open_image(\"image.jpg\");\n\n    // Apply a filter to the pixels\n    filters::filter(&amp;mut img, \"twenties\");\n\n    // Write the new image to the filesystem.\n    save_image(img, \"new_image.jpg\");\n\n}\n</code></pre>"},{"location":"native-tutorial/#run-the-code","title":"Run The Code","text":"<p>To run the program in release mode, run:</p> <pre><code>cargo run --release\n</code></pre> <p>Warning</p> <p>Make sure you run in release mode for optimum performance, by adding the --release flag to your command. Otherwise, performance will be greatly affected.</p>"},{"location":"native-tutorial/#bonus-add-timing","title":"Bonus: Add Timing","text":"<p>If you'd like to find out how long it takes to process your image, you can add some code to capture this.</p> <p>Add the <code>time</code> dependency to your Cargo.toml:</p>"},{"location":"native-tutorial/#cargotoml_1","title":"Cargo.toml","text":"<pre><code>[dependencies]\ntime=\"0.2.1\"\n</code></pre> <p>Then in your code:</p> <pre><code>extern crate photon_rs;\nuse photon_rs::native::{open_image, save_image};\nuse time::{PreciseTime};\n\nfn main() {\n    // Open the image (a PhotonImage is returned)\n    let mut img = open_image(\"image.jpg\");\n\n    // Start time\n    let start = PreciseTime::now();\n\n    // Process image\n    photon_rs::channels::alter_channel(&amp;mut img, 1, -20);\n    save_image(img, \"raw_image.png\");\n\n    // Output time taken.\n    let end = PreciseTime::now();\n    println!(\"Took {} seconds to process image.\", start.to(end));\n}\n</code></pre>"},{"location":"native-tutorial/#want-more-examples","title":"Want More Examples?","text":"<p>To view more examples for native-use, check out the <code>/examples</code> folder in Photon's repository. You'll find full instructions on how to run these in the README.</p>"},{"location":"native-tutorial/#working-with-the-web","title":"Working with the Web","text":"<p>If you'd like to get started with Photon for the web, see the accompanying web tutorial.</p>"},{"location":"photon-cloudflare-workers/","title":"Photon with Cloudflare Workers","text":""},{"location":"photon-cloudflare-workers/#installation","title":"Installation","text":"<p>If you're using Cloudflare Workers, you can install the @cf-wasm/photon library to use Photon with Cloudflare Workers. </p> <p>It is available on NPM, and can be installed like so:</p> <pre><code>npm install @cf-wasm/photon\n</code></pre>"},{"location":"photon-cloudflare-workers/#usage","title":"Usage","text":"<p>The full usage steps are provided here.</p> <p>Thanks to Fineshop Design for creating this library!</p>"},{"location":"serialize-to-json/","title":"Serialize/Deserialize to JSON","text":"<p>You can serialize and deserialize to and from JSON, if required. </p> <p>Here is a minimum example:</p>"},{"location":"serialize-to-json/#cargotoml","title":"Cargo.toml","text":"<pre><code>[package]\nauthors = [\"Name &lt;email&gt;\"]\nname = \"serialize-example\"\nedition = \"2018\"\n\n[dependencies]\nphoton=\"0.0.1\"\nserde = { version = \"1.0\", features = [\"derive\"] }\nserde_json = \"1.0\"\n</code></pre>"},{"location":"serialize-to-json/#binrs","title":"bin.rs","text":"<pre><code>extern crate image;\nextern crate photon;\nuse photon::native::{open_image, save_image};\nuse photon::{Rgb, PhotonImage};\nuse serde::{Serialize, Deserialize};\n\nfn main() {\n    let photon_image = PhotonImage::new(134, 145);\n\n    let serialized = serde_json::to_string(&amp;photon_image).unwrap();\n    println!(\"serialized = {}\", serialized);\n\n    let deserialized: PhotonImage = serde_json::from_str(&amp;serialized).unwrap();\n    println!(\"deserialized = {:?}\", deserialized);\n}\n</code></pre>"},{"location":"specimen/","title":"Specimen","text":""},{"location":"specimen/#functions-available","title":"Functions Available","text":""},{"location":"specimen/#channelcolor-manipulation","title":"Channel/Color Manipulation","text":"<p>Photon allows you to manipulate the channels or colors of your images, including:</p> <ul> <li>Swap image channels.</li> <li>Increase/decrease R, G, B channel values</li> <li>Remove channels</li> </ul>"},{"location":"specimen/#filters","title":"Filters","text":"<p>You can also choose from a selection of over 20 filters, as shown below.</p> <p>Sed suscipit, orci non pretium pretium, quam mi gravida metus, vel venenatis justo est condimentum diam. Maecenas non ornare justo. Nam a ipsum eros. Nulla aliquam orci sit amet nisl posuere malesuada. Proin aliquet nulla velit, quis ultricies orci feugiat et. <code>Ut tincidunt sollicitudin</code> tincidunt. Aenean ullamcorper sit amet nulla at interdum.</p>"},{"location":"specimen/#headings","title":"Headings","text":""},{"location":"specimen/#the-3rd-level","title":"The 3rd level","text":""},{"location":"specimen/#the-4th-level","title":"The 4th level","text":""},{"location":"specimen/#the-5th-level","title":"The 5th level","text":""},{"location":"specimen/#the-6th-level","title":"The 6th level","text":""},{"location":"specimen/#headings-with-secondary-text","title":"Headings with secondary text","text":""},{"location":"specimen/#the-3rd-level-with-secondary-text","title":"The 3rd level with secondary text","text":""},{"location":"specimen/#the-4th-level-with-secondary-text","title":"The 4th level with secondary text","text":""},{"location":"specimen/#the-5th-level-with-secondary-text","title":"The 5th level with secondary text","text":""},{"location":"specimen/#the-6th-level-with-secondary-text","title":"The 6th level with secondary text","text":""},{"location":"specimen/#blockquotes","title":"Blockquotes","text":"<p>Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum.   Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc   mauris, a ultricies libero efficitur sed. Class aptent taciti sociosqu ad   litora torquent per conubia nostra, per inceptos himenaeos. Sed molestie   imperdiet consectetur.</p>"},{"location":"specimen/#blockquote-nesting","title":"Blockquote nesting","text":"<p>Sed aliquet, neque at rutrum mollis, neque nisi tincidunt nibh, vitae   faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem   libero fermentum urna, ut efficitur elit ligula et nunc.</p> <p>Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla.     Ut sit amet placerat ante. Proin sed elementum nulla. Nunc vitae sem odio.     Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum.     eu odio.</p> <p><code>Suspendisse rutrum facilisis risus</code>, eu posuere neque commodo a.       Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo       bibendum, sodales mauris ut, tincidunt massa.</p>"},{"location":"specimen/#other-content-blocks","title":"Other content blocks","text":"<p>Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu   lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl,   sit amet laoreet nibh.   <code>js hl_lines=\"8\"   var _extends = function(target) {     for (var i = 1; i &lt; arguments.length; i++) {       var source = arguments[i];       for (var key in source) {         target[key] = source[key];       }     }     return target;   };</code></p> <p>Praesent at <code>:::js return target</code>, sodales nibh vel, tempor felis. Fusce       vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices.       Donec consectetur mauris non neque imperdiet, eget volutpat libero.</p>"},{"location":"specimen/#lists","title":"Lists","text":""},{"location":"specimen/#unordered-lists","title":"Unordered lists","text":"<ul> <li> <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus   non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci,   at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero.</p> <ul> <li>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.</li> <li>Nam vulputate tincidunt fringilla.</li> <li>Nullam dignissim ultrices urna non auctor.</li> </ul> </li> <li> <p>Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut   eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam   ac, aliquet sed mauris.</p> </li> <li> <p>Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur   accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh   lacinia sed. Aenean in finibus diam.</p> </li> </ul>"},{"location":"specimen/#ordered-lists","title":"Ordered lists","text":"<ol> <li> <p>Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis   elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla   consectetur feugiat sodales.</p> </li> <li> <p>Cum sociis natoque penatibus et magnis dis parturient montes, nascetur   ridiculus mus. Aliquam ornare feugiat quam et egestas. Nunc id erat et quam   pellentesque lacinia eu vel odio.</p> <ol> <li> <p>Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet   quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a   ultricies libero efficitur sed.</p> <ol> <li>Mauris dictum mi lacus</li> <li>Ut sit amet placerat ante</li> <li>Suspendisse ac eros arcu</li> </ol> </li> <li> <p>Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet   rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Sed   aliquet, neque at rutrum mollis, neque nisi tincidunt nibh.</p> </li> <li> <p>Pellentesque eget <code>:::js var _extends</code> ornare tellus, ut gravida mi. <code>js hl_lines=\"1\" var _extends = function(target) {   for (var i = 1; i &lt; arguments.length; i++) {     var source = arguments[i];     for (var key in source) {       target[key] = source[key];     }   }   return target; };</code></p> </li> </ol> </li> <li> <p>Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis   sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis   nulla. Vivamus a pharetra leo.</p> </li> </ol>"},{"location":"specimen/#definition-lists","title":"Definition lists","text":"<p>Lorem ipsum dolor sit amet</p> <p>:   Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus     tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor     lobortis orci, at elementum urna sodales vitae. In in vehicula nulla.</p> <pre><code>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.\nNam vulputate tincidunt fringilla.\nNullam dignissim ultrices urna non auctor.\n</code></pre> <p>Cras arcu libero</p> <p>:   Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin     ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at     aliquam ac, aliquet sed mauris.</p>"},{"location":"specimen/#code-blocks","title":"Code blocks","text":""},{"location":"specimen/#inline","title":"Inline","text":"<p>Morbi eget <code>dapibus felis</code>. Vivamus <code>venenatis porttitor</code> tortor sit amet rutrum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. <code>Pellentesque aliquet quam enim</code>, eu volutpat urna rutrum a.</p> <p>Nam vehicula nunc <code>:::js return target</code> mauris, a ultricies libero efficitur sed. Sed molestie imperdiet consectetur. Vivamus a pharetra leo. Pellentesque eget ornare tellus, ut gravida mi. Fusce vel lacinia lacus.</p>"},{"location":"specimen/#listing","title":"Listing","text":"<pre><code>var _extends = function(target) {\n  for (var i = 1; i &lt; arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      target[key] = source[key];\n    }\n  }\n  return target;\n};\n</code></pre>"},{"location":"specimen/#horizontal-rules","title":"Horizontal rules","text":"<p>Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.</p> <p>Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales.</p>"},{"location":"specimen/#photon-vs-other-libraries","title":"Photon vs Other Libraries","text":"Operation Photon Python Imaging Library ImageMagick arcu sed Flip horizontally 1.2s 34.4s - yes yes Ornare viverra ex yes yes yes yes yes Mauris a ullamcorper yes yes partial yes yes Nullam urna elit yes yes yes yes yes Malesuada eget finibus yes yes yes yes yes Ullamcorper yes yes yes yes yes Vestibulum sodales yes - yes - yes Pulvinar nisl yes yes yes - - Pharetra aliquet est yes yes yes yes yes Sed suscipit yes yes yes yes yes Orci non pretium yes partial - - - <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero.</p> Left Center Right Lorem dolor <code>amet</code> ipsum sit <p>Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh.</p> Table with colgroups (Pandoc) Lorem ipsum dolor sit amet. Sed sagittis eleifend rutrum. Donec vitae suscipit est."},{"location":"specimen/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs help</code> - Print this help message.</li> </ul>"},{"location":"specimen/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"using-photon-natively/","title":"Using Photon Natively","text":""},{"location":"using-photon-natively/#prerequisites","title":"Prerequisites","text":"<p>Add Photon as a dependency to your project's Cargo.toml:</p>"},{"location":"using-photon-natively/#cargotoml","title":"Cargo.toml","text":"<pre><code>photon-rs = \"0.2.0\"\n</code></pre>"},{"location":"using-photon-natively/#open-an-image","title":"Open an Image","text":"<p>To open an image:</p>"},{"location":"using-photon-natively/#binrs","title":"bin.rs","text":"<pre><code>extern crate photon_rs;\nuse photon_rs::native::{open_image};\nfn main() {\n    let mut img = open_image(\"image.jpg\").expect(\"File should open\");\n}\n</code></pre>"},{"location":"using-photon-natively/#process-the-image","title":"Process The Image","text":"<p>To apply a filter effect to the opened image, we need to pass in our image and a filter name.</p> <pre><code>photon_rs::filters::filter(&amp;mut img, \"twenties\");\n</code></pre> <p>Notice that we're passing a mutable reference to the image. This allows the function to modify the image, rather than return a new image. There are a variety of filter effects we can pass. Once you get the program compiled, try passing in \"radio\" instead of the filter above. For a full list, see the documentation.</p>"},{"location":"using-photon-natively/#write-to-the-filesystem","title":"Write to the Filesystem","text":"<p>Then, to write the image to the filesystem:</p> <pre><code>save_image(img, \"new_image.jpg\").expect(\"File should be saved\");\n</code></pre> <p>Notice here we're saving it as a JPG image, but we could also save it as a PNG or a different output format, by including a different file extension.</p>"},{"location":"using-photon-natively/#sample-program","title":"Sample Program","text":"<p>This program adds a sepia effect to an image:</p> <pre><code>extern crate photon_rs;\nuse photon_rs::{monochrome};\nuse photon_rs::native::{open_image, save_image};\n\nfn main() {\n    // Open the image (a PhotonImage is returned)\n    let mut img = open_image(\"image.jpg\").expect(\"File should open\");\n\n    // Apply a sepia effect to the image.\n    monochrome::sepia(&amp;mut img);\n\n    save_image(img, \"raw_image.png\").expect(\"File should be saved\");\n}\n</code></pre>"},{"location":"using-photon-node/","title":"Using Photon with Node.js","text":"<p>Photon also can be executed on Node.js via WebAssembly. In this guide, we're going to  take a look at how to read, filter and save images on Node.js using Photon and the <code>fs</code> module.</p>"},{"location":"using-photon-node/#installing-photon","title":"Installing Photon","text":""},{"location":"using-photon-node/#prerequisites","title":"Prerequisites","text":"<p>Install via npm:</p> <pre><code>npm install @silvia-odwyer/photon-node\n</code></pre>"},{"location":"using-photon-node/#importing","title":"Importing","text":"<pre><code>var photon = require(\"@silvia-odwyer/photon-node\");\n</code></pre>"},{"location":"using-photon-node/#usage","title":"Usage","text":"<p>For a quick overview, see the sample code snippet below.</p>"},{"location":"using-photon-node/#creating-a-photonimage","title":"Creating A PhotonImage","text":"<p>To convert your image to a Photon-compatible image, you'll need to encode your image as base64  and then create a PhotonImage from the encoded base64:</p> <pre><code>// read file, then convert to base64\nvar base64 = fs.readFileSync(`input.png`, { encoding: 'base64' });\nlet data = base64.replace(/^data:image\\/(png|jpg);base64,/, \"\");\n\n// convert base64 to PhotonImage\nvar phtn_img = photon.PhotonImage.new_from_base64(data);\n</code></pre>"},{"location":"using-photon-node/#applying-effects-and-filters","title":"Applying Effects and Filters","text":"<p>Now that you have your PhotonImage, you can apply effects and filters to this image:</p> <pre><code>photon.grayscale(phtn_img);\n</code></pre>"},{"location":"using-photon-node/#save-image","title":"Save Image","text":"<p>To save and write your image, you'll need to convert the PhotonImage back to base64,  this base64 can then be saved as an image.</p> <pre><code>// get base64 from filtered image, and write \nlet output_base64 = phtn_img.get_base64();\nlet output_image_name = \"output.png\";\nvar output_data = output_base64.replace(/^data:image\\/\\w+;base64,/, '');\n\nfs.writeFile(output_image_name, output_data, {encoding: 'base64'}, function(err) {\n});\n</code></pre>"},{"location":"using-photon-node/#sample-code","title":"Sample Code","text":"<p>The following code reads an image called <code>input.png</code>, converts it to grayscale,  and then saves it as <code>output.png</code>. All imports required are also included.</p> <pre><code>var fs = require('fs');\n\nvar photon = require(\"@silvia-odwyer/photon-node\");\n\nconst fetch = require('node-fetch');\nglobal.fetch = fetch;\n\nfunction grayscaleImage() {\n    // read file, then convert to base64\n    var base64 = fs.readFileSync(`input.png`, { encoding: 'base64' });\n    let data = base64.replace(/^data:image\\/(png|jpg);base64,/, \"\");\n\n    // convert base64 to PhotonImage\n    var phtn_img = photon.PhotonImage.new_from_base64(data);\n\n    photon.grayscale(phtn_img);\n\n    // get base64 from filtered image, and write \n    let output_base64 = phtn_img.get_base64();\n    let output_image_name = \"output.png\";\n    var output_data = output_base64.replace(/^data:image\\/\\w+;base64,/, '');\n\n    fs.writeFile(output_image_name, output_data, {encoding: 'base64'}, function(err) {\n    });\n    console.log(`Saved ${output_image_name}`);\n\n}\n\ngrayscaleImage();\n</code></pre>"},{"location":"using-photon-web/","title":"Using Photon on the Web","text":""},{"location":"using-photon-web/#installing-photon","title":"Installing Photon","text":""},{"location":"using-photon-web/#prerequisites","title":"Prerequisites","text":"<p>Install via npm:</p> <pre><code>npm install @silvia-odwyer/photon\n</code></pre>"},{"location":"using-photon-web/#importing","title":"Importing","text":"<pre><code>import(\"@silvia-odwyer/photon\").then(photon =&gt; {\n    // Module has now been imported. \n    // All image processing logic w/ Photon goes here.\n    // See sample code below.\n}\n</code></pre>"},{"location":"using-photon-web/#usage","title":"Usage","text":"<p>Working with Photon involves the use of the HTML5 Canvas element, so you'll need to create  a canvas and draw your desired image onto the canvas. </p> <p>You can then convert this canvas to a PhotonImage, and apply effects to it. </p> <p>See the sample code below.</p>"},{"location":"using-photon-web/#sample-code","title":"Sample Code","text":"<pre><code>function filterImage() {\n    // Create a canvas and get a 2D context from the canvas\n    var canvas = document.getElementById(\"canvas\");\n    var ctx = canvas.getContext(\"2d\");\n\n    // Draw the image element onto the canvas\n    ctx.drawImage(newimg, 0, 0);\n\n    // Convert the ImageData found in the canvas to a PhotonImage (so that it can communicate with the core Rust library)\n    let image = photon.open_image(canvas, ctx);\n\n    // Filter the image, the PhotonImage's raw pixels are modified\n    photon.filter(image, \"radio\");\n\n    // Place the modified image back on the canvas\n    photon.putImageData(canvas, ctx, image);\n}\n</code></pre>"},{"location":"using-photon-web/#apply-multiple-effects","title":"Apply Multiple Effects","text":"<p>To apply multiple effects to a single image, you can pass the same image into consecutive calls. </p> <p>For example, to add a \"radio\" filter effect, then convert to greyscale, and finally increment the Red channel:</p> <pre><code>function filterImage() {\n    // Create a canvas and get a 2D context from the canvas\n    var canvas = document.getElementById(\"canvas\");\n    var ctx = canvas.getContext(\"2d\");\n\n    // Draw the image element onto the canvas\n    ctx.drawImage(newimg, 0, 0);\n\n    // Convert the ImageData found in the canvas to a PhotonImage (so that it can communicate with the core Rust library)\n    let image = photon.open_image(canvas, ctx);\n\n    // Filter the image, the PhotonImage's raw pixels are modified\n    photon.filter(image, \"radio\");\n\n    photon.grayscale(image);\n\n    photon.alter_red_channel(image, 20);\n\n    // Place the pixels back on the canvas\n    photon.putImageData(canvas, ctx, image);\n}\n</code></pre>"},{"location":"web-tutorial/","title":"Web Tutorial","text":"<p>Coming soon! Stay tuned!</p>"}]}